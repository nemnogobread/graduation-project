function [y, name]=view_on_oscilloscope_cmp1(name, vc, directory)


cd('E:\Elena\Tektronix')
!python readfromdpo_binary_multiple_channels_cmd.py E:/Elena/Pulses/210823/ buff 1 5000000 CH1
cd(directory);
%cd('G:\РНФ\15.06.2022\СШП когерентные излучатели\Сложение в пространстве 20.09.2024\4_ant_1_02.10.24')


[t,y] = import_pulses('buff');

y=clean_nan_inf(y);
[m,n]=size(y)

%y1=y(:,1);
%y2=y(:,2);
%y3=y(:,3);
%y4=y(:,4);

name = [name '_' num2str(vc)];

%load("sample.mat")

%figure; plot(t, y1, t, y2, t, y3, t, y4);
figure; plot(t(1:1e3),y(1:1e3,:)')
eval(['save  ' name '.mat y t vc'])
%save tmp t  y1 y2 y2 y3 y4 


function [tt,y] = import_pulses(name)
%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: E:\Elena\Pulses\210823\test_1.csv
%
% Auto-generated by MATLAB on 25-Aug-2023 12:44:48

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 3);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
%opts.VariableNames = ["time", "CH1", "CH2", "CH3", "CH4"];
%opts.VariableTypes = ["double", "double", "double", "double"];

opts.VariableNames = ["time", "CH1"];
opts.VariableTypes = ["double", "double"];


% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
totname = [name '.csv']
totname = ['E:\Elena\Pulses\210823\' totname]
test1 = readtable(totname, opts);

eval(['delete ' totname]);

%% Convert to output type
y = table2array(test1);

%% Clear temporary variables
clear opts

[CHNL, NR_pt, XZEro, XINcr, YZEro, YOFf, YMUlt, BYT_nr]=import_parameters(name);

tt = XZEro(1) + XINcr(1) * (y(:,1) - 1);
for kk=1:numel(NR_pt)
    y(:,kk+1) = YZEro(kk) + YMUlt(kk)*(y(:,kk+1) - YOFf(kk));
end

y = y(:,2:end);


function [CHNL, NR_pt, XZEro, XINcr, YZEro, YOFf, YMUlt, BYT_nr]=import_parameters(name)

%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: E:\Elena\Pulses\210823\test_1_params.csv
%
% Auto-generated by MATLAB on 25-Aug-2023 12:54:13

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 10);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["CHNL", "NR_pt", "XUNit", "XZEro", "XINcr", "YUNit", "YZEro", "YOFf", "YMUlt", "BYT_nr"];
opts.VariableTypes = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, ["CHNL", "XUNit", "YUNit"], "TrimNonNumeric", true);
opts = setvaropts(opts, ["CHNL", "XUNit", "YUNit"], "ThousandsSeparator", ",");

% Import the data
totname = [name '_params.csv'];
totname = ['E:\Elena\Pulses\210823\' totname];

test1params = readtable(totname, opts);

%% Convert to output type
y = table2array(test1params);

%% Clear temporary variables
clear opts

CHNL   = y(:,1);
NR_pt = y(:,2);
XZEro  = y(:,4);
XINcr  = y(:,5);
%, YUNit
YZEro  = y(:,7);
YOFf   = y(:,8);
YMUlt  = y(:,9);
BYT_nr = y(:,10);

% CHNL, NR_pt, XUNit, XZEro, XINcr, YUNit, YZEro, YOFf, YMUlt, BYT_nr = params.iloc[0]   
% data['time'] = [(XZEro + XINcr * (x - 1)) for x in range(len(dt['time']))] #X = XZEro + XINcr * (i - 1)
% 
% for ii in range(len(channels)):
%     print(ii)
%     CHNL, NR_pt, XUNit, XZEro, XINcr, YUNit, YZEro, YOFf, YMUlt, BYT_nr = params.iloc[ii] 
%     data[channels[ii]] = [(YZEro + YMUlt*(y - YOFf)) for y in dt[channels[ii]]]

function [pulses, pulsesf, y1f, y2f, y2s, tf, trace, tracef] = signal_bp_recover_oscill(t, y1, y2)

%close all

% load('bp_filter120_500.mat')
% ybf = filter(Num,1,yb);
% figure; psd(ybf,1024,1/ts/1e9)
% ylf = filter(Num,1,yl);
% hold on; psd(ylf(52:1e5));
% 
% hold on;  plot(ybf(1:1e5),'r');
%load('ant2lopuxi_babochka.mat');
%load('bp_filter120_500.mat');
%load('bpfilt_140_500_n42.mat');

% y1 = clean_nan_inf(y1);
% y2 = clean_nan_inf(y2);


fLim = 1/4e-10/1e9;
y2s=filter(ones(1,100),1,y2/100);

figure; plot(y2); hold on; plot(y2s)

% figure; periodogram(y2,[],4*1024,fLim);
% hold on;
% % frband0 = [0.059-0.002 0.059+0.002 0.082-0.002 0.082+0.002 0.141-0.002 0.141+0.002 0.164-0.002 0.164+0.002 0.2-0.002 0.2+0.002 0.424-0.002 0.424+0.002 0.566-0.002 0.566+0.002];
% % [~, ~, ~, y2f] = multibandfilter(y2,frband0,fLim);
% periodogram(y2f,[],4*1024,fLim);
% figure; plot(y2); hold on; plot(y2f);

figure; periodogram(y1,[],1*1024,fLim);
hold on;
%y1f=filter(Num,1,y1);
%y1f=filter(Hd,y1);
%y1f=y1;
frband = [0.08 0.11 0.14 0.143 0.282 0.284 0.425-0.002 0.425+0.002 0.44-0.01 0.44+0.01 0.624 0.626 0.78 0.82 0.925 0.956 1.0925 1.095];
%frband = [0.14 0.143 0.7 1.25];
%frband = [0.001 0.143 0.7 1.25];
[~, ~, ~, y1f] = multibandfilter(y1,frband,fLim);
% 
periodogram(y1f,[],1*1024,fLim);
xlim([0 fLim/2]);
% внесение задержки из-за фурье фильтрации
y1f = y1f(501+203:end);
y2f = y2s(1:numel(y1f));
tf   = t(1:numel(y1f));

% синхроимпульсы 
% tracef = (~(y2f>2));
% trace  = (~(y2s >2));

tracef = (~(y2f>2));
trace  = (~(y2s >2));


%pulses = recover_ant_pulses(y1, trace);
[pulsesf, npulsesf] = recover_ant_pulses(y1f, tracef);
[pulses, npulses]  = recover_ant_pulses(y1, trace);

npulsesf

npulses

powerratios(pulses)
powerratios(pulsesf)

function powerratios(pulses)

power1Golova = std((pulses(1,620:820)))^2
power1Telo   = std((pulses(1,1200:1700)))^2

powerGolova = std(sum(pulses(:,620:820)))^2
powerTelo   = std(sum(pulses(:,1200:1700)))^2

Golova21Pulse = (powerGolova/power1Golova)/(3200^2)
Telo21Pulse = (powerTelo/power1Telo)/(3200)

Golova2Telo = powerGolova/powerTelo

function [pulses, npulses] = recover_ant_pulses(y1f, y2)



%   y1f = y1f(55000:end);
%   y2 = y2(55000:end);
% 
% figure; plot(y1f); hold on; plot(y2);

ff=1; pl = 2500; shift = 500;
basa = 1; 
kk=1+basa+shift;

while kk<length(y2)-pl
    %if (y2(kk)>2) && (y2(kk-basa)<2)
    if (y2(kk)>0) && (y2(kk-basa)<1)
        pulses(ff,:)=y1f(kk-shift:kk+pl-1);
        
         if ff>1
             piece=shift+1:shift+110;
             [a,b] = xcorr(pulses(1,piece),y1f(kk+1:kk+110));
             [~,aind]=max(a);
         %b(aind)
             pulses(ff,:)=y1f(kk-shift-(b(aind)-1):kk+pl-(b(aind)-1)-1);
         end

        kk=kk+pl;
        ff=ff+1;
    else
        kk = kk+1;
    end
end

npulses = ff;

function y=clean_nan_inf(x)
x(isnan(x))=0; 
x(x == inf)=0; 
x(x ==-inf)=0;

y=x;

function [std_std_frac, std_total, std_std_total, xi] = multibandfilter(x,frband,fs)

%frband = [0.085 0.105 0.14 0.143 0.282 0.284 0.624 0.626 0.78 0.82 0.925 0.956 1.0925 1.095];

if max(frband)>fs/2
    error('Signal frequency can not be greater sampling frequency.');
end

if (numel(frband)/2) ~= fix(numel(frband)/2)
    error('Frequency mask length must be even.');
end


InitialLength=length(x);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
nfft = 2^nextpow2(length(x));
Pxx = abs(fft(x,nfft)).^2/nfft;

% полная дисперсия через энергетический спектр (для контроля)
std_total=sqrt(sum(Pxx)/length(x));

% частота в долях частоты сэмплировани
frband = frband/fs;
% частота в привязке к гармоникам преобразования Фурье
% 2 - nfft
frband = fix(frband*(nfft));

% дисперсия в заданной полосе
%std_frac=sqrt(2*sum(Pxx(frband(1)+1:frband(2)+1))/length(x));

% дисперсия через среднеквадратичное отклонение (для контроля)
std_std_total = std(x);

% проверка через зануление компонент
% здесь нужно сделать обрезание нулевого сигнала, еслипервоначальная длина
% сигнала не совпадает со степенью двойки
Xf=fft(x,nfft);

% маска для зануления
frmask=ones(1,nfft); 
for hh=1:2:numel(frband)
    frmask(frband(hh)+1:frband(hh+1)+1)=0;
    frmask((nfft-frband(hh+1)+1):(nfft-frband(hh)+1))=0;

    %frmask(frband(1)+1:frband(2)+1)=1;
    %frmask((nfft-frband(2)+1):(nfft-frband(1)+1))=1;
end


[m,n]=size(Xf);
if n<m
    Xf=Xf';
end
Xf=Xf.*frmask;
xi=ifft(Xf);
xi=(xi(nfft-InitialLength+1:end));

% дисперсия через 
std_std_frac = std(xi);

